#! /usr/bin/env node
'use strict';

const fs = require('fs');
const process = require('process');

var content = fs.readFileSync(process.argv[2], 'utf8');
content = content.replace(/@[a-zA-Z0-9]+\s*/g, '');
var lines = content.split(/\n/);

var inClass = [];
var inMethod = null;
var newLines = [];

for (var i = 0; i < lines.length; i++)
	processLine(lines[i]);

function processLine(line) {
	if (line.match(/^import /)) return;
	if (line.match(/^package /)) return;
	var lastInClass = inClass[inClass.length - 1];

	// Comments
	var comment = '';
	var match = line.match(/^(.*?)(\s*\/\/ .*)$/);
	if (match) {
		line = match[1];
		comment = match[2].replace('// ', '# ');
	}

	// Inside a method
	if (inMethod) {
		// End of method
		if (line == inMethod.end) {
			inMethod.finalize(line);
			inMethod = null;
			return;
		}

		line = line.replace(/^(\s*)[a-zA-Z0-9]+(<.*?>|) ([a-zA-Z0-9]+) =/g, replaceAssignment);
		line = line.replace(/for \([a-zA-Z0-9]+(<.*?>|) ([a-zA-Z0-9]+) : /g, replaceFor);
		line = replaceExpressionLike(line);
		line = line.replace(/([^a-zA-Z0-9':>\$])([a-zA-Z0-9]+)/g, replaceVar);
		line = line.replace(/if \((.*)\) (continue|break|return);/g, replaceShortIf);
		newLines.push(line + comment);
		return;
	}

	function replaceAssignment(match, a, b, c) {
		inMethod.vars[c] = true;
		return a + 'my $' + c + ' =';
	}

	function replaceFor(match, a, b) {
		inMethod.vars[b] = true;
		return 'for my $' + b + ' (';;
	}

	function replaceVar(match, a, b) {
		if (inMethod.vars[b]) return a + '$' + b;
		for (var i = 0; i < inClass.length; i++)
			if (inClass[i].members[b]) return a + '$o:' + b;
		return match;
	}

	function replaceShortIf(match, a, b) {
		if (b == 'continue') return 'next if ' + a + ';';
		if (b == 'break') return 'last if ' + a + ';';
		if (b == 'return') return 'return if ' + a + ';';
		return match;
	}

	// Class
	match = line.match(/^(\s*)(public |)(static |)(abstract |)(final |)(class|interface) ([a-zA-Z0-9]+)(<.*?>|) (extends|implements|\{)/);
	if (match) {
		inClass.push({
			end: match[1] + '}',
			indent: match[1],
			inStateMembers: false,
			finalMembers: [],
			stateMembers: [],
			publicMembers: [],
			members: {}
			});
		newLines.push(line + ' ### CLASS');
		return;
	}

	// Inside a class
	if (lastInClass) {
		// End of class
		if (line == lastInClass.end) {
			newLines.push(line + ' ### CLASS');
			inClass.pop();
			return;
		}

		// Constructor
		match = line.match(/^(\s*)(public |)([a-zA-Z0-9]+)\((.*)\) \{$/);
		if (match) {
			inMethod = {
				end: match[1] + '}',
				indent: match[1],
				vars: {},
				inConstructor: false,
				finalize: finalizeConstructor,
				};

			newLines.push(match[1] + 'sub new(' + processArgs('class', match[4]) + ') {');
			newLines.push(match[1] + '\tmy $o = bless {');
			for (var i = 0; i < lastInClass.finalMembers.length; i++)
				newLines.push(match[1] + '\t\t' + lastInClass.finalMembers[i] + ' => $' + lastInClass.finalMembers[i] + ',');
			newLines.push(match[1] + '\t\t};');
			newLines.push('');
			newLines.push(match[1] + '\t# State');
			for (var i = 0; i < lastInClass.stateMembers.length; i++)
				newLines.push(match[1] + '\t' + lastInClass.stateMembers[i]);
			newLines.push('');
			return;
		}

		// Method
		match = line.match(/^(\s*)(public |private |protected |)(static |)(final |)([a-zA-Z0-9\.\[\]]+|[a-zA-Z0-9\.]+<[a-zA-Z0-9\[\], ]+>) ([a-zA-Z0-9]+)\((.*)\) \{$/);
		if (match) {
			inMethod = {
				end: match[1] + '}',
				indent: match[1],
				vars: {},
				inConstructor: false,
				finalize: finalizeMethod,
				};
			newLines.push(match[1] + 'sub ' + match[6] + '(' + processArgs('o', match[7]) + ') {');
			return;
		}

		// Abstract method
		match = line.match(/^(\s*)(public |private |protected |)(static |)(abstract |)(final |)([a-zA-Z0-9\.\[\]]+|[a-zA-Z0-9\.]+<[a-zA-Z0-9\[\], ]+>) ([a-zA-Z0-9]+)\((.*)\);$/);
		if (match) {
			newLines.push(match[1] + '# abstract sub ' + match[7] + '(' + processArgs('o', match[8]) + ')');
			return;
		}

		// State members
		if (comment.match(/State/i))
			lastInClass.inStateMembers = true;

		// Member
		match = line.match(/^(\s*)(public |private |protected |)(static |)(final |)([a-zA-Z0-9\.\[\]]+|[a-zA-Z0-9\.]+<.*?>) ([a-zA-Z0-9]+)(;| = .*;)$/);
		if (match) {
			if (lastInClass.inStateMembers || match[7] != ';') {
				lastInClass.stateMembers.push('$o:' + match[6] + replaceExpressionLike(match[7]));
			} else {
				lastInClass.finalMembers.push(match[6]);
			}
			if (match[2] == 'public ') lastInClass.publicMembers.push(match[6]);
			lastInClass.members[match[6]] = true;
			return;
		}
	}

	function processArgs(first, text) {
		if (text == '') return '$' + first;

		text = text.replace(/<.*?>/g, '');
		var args = text.split(',');
		var clean = ['$' + first];
		for (var i = 0; i < args.length; i++) {
			var arg = args[i];
			var m = arg.match(/^\s*(final |)([a-zA-Z0-9\[\]<\.>]+) ([a-zA-Z0-9]+)\s*$/);
			if (! m) {
				console.log('Weird argument: ' + arg);
				continue;
			}

			if (inMethod) inMethod.vars[m[3]] = true;
			clean.push('$' + m[3]);
		}

		return clean.join(', ');
	}

	function finalizeConstructor(line) {
		newLines.push('');
		newLines.push(inMethod.indent + '\treturn $o;');
		newLines.push(line);

		newLines.push('');
		for (var i = 0; i < lastInClass.publicMembers.length; i++)
			newLines.push(inMethod.indent + 'sub ' + lastInClass.publicMembers[i] + ';');
	}

	function finalizeMethod(line) {
		newLines.push(line);
	}

	newLines.push(line + comment);

	function replaceExpressionLike(line) {
		line = line.replace(/new ArrayList<>\(\)/g, '[]');
		line = line.replace(/new HashSet<.*?>\(\)/g, '{}');
		line = line.replace(/new HashMap<.*?>\(\)/g, '{}');
		line = line.replace(/ new ([a-zA-Z0-9]+)(<>|)\(/g, function(match, a, b) { return ' CDS::' + a + '->new('; });
		line = line.replace(/([a-zA-Z0-9\)])\.([a-zA-Z0-9])/g, function(match, a, b) { return a + '->' + b; });
		line = line.replace(/this->/g, '$o:');
		line = line.replace(/\bthis\b/g, '$o');
		line = line.replace(/([a-zA-Z0-9:>\-]+) == null/g, function(match, a) { return '! $' + a; });
		line = line.replace(/([a-zA-Z0-9:>\-]+)->byteLength < 1/g, function(match, a) { return '! length $' + a; });
		line = line.replace(/"/g, '\'');
		line = line.replace(/BoxLabel->PUBLIC/g, '\'public\'');
		line = line.replace(/BoxLabel->PRIVATE/g, '\'private\'');
		line = line.replace(/BoxLabel->INQUEUE/g, '\'in-queue\'');
		line = line.replace(/Duration->([A-Z]+)/g, function(match, a) { return 'CDS->' + a; });
		line = line.replace(/ActorStatus->ACTIVE/g, '\'active\'');
		line = line.replace(/ActorStatus->IDLE/g, '\'idle\'');
		line = line.replace(/ActorStatus->REVOKED/g, '\'revoked\'');
		line = line.replace(/BC->([a-zA-Z0-9_]+)/g, function(match, a) { return '\'' + a.replace('_', ' ') + '\''; });
		line = line.replace(/System->currentTimeMillis/g, 'time * 1000');
		line = line.replace(/\(\)/g, '');
		return line;
	}
}

while (newLines[0] == '') newLines.shift();
for (var i = 0; i < newLines.length; i++) {
	var line = newLines[i];
	if (line.substr(0, 1) == '\t') line = line.substr(1);
	console.log(line);
}
