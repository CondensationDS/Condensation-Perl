# BEGIN AUTOGENERATED

sub register($class, $cds, $help) {
	my $node000 = CDS::Parser::Node->new(0);
	my $node001 = CDS::Parser::Node->new(0);
	my $node002 = CDS::Parser::Node->new(0);
	my $node003 = CDS::Parser::Node->new(1, {constructor => \&new, function => \&help});
	my $node004 = CDS::Parser::Node->new(0);
	my $node005 = CDS::Parser::Node->new(0);
	my $node006 = CDS::Parser::Node->new(1, {constructor => \&new, function => \&book});
	$cds->addArrow($node000, 1, 0, 'book');
	$cds->addArrow($node001, 1, 0, 'book');
	$cds->addArrow($node002, 1, 0, 'book');
	$help->addArrow($node003, 1, 0, 'book');
	$node000->addArrow($node000, 1, 0, 'HASH', \&collectHash);
	$node000->addArrow($node004, 1, 0, 'HASH', \&collectHash);
	$node001->addArrow($node001, 1, 0, 'OBJECT', \&collectObject);
	$node001->addArrow($node006, 1, 0, 'OBJECT', \&collectObject);
	$node002->addArrow($node002, 1, 0, 'HASH', \&collectHash);
	$node002->addArrow($node006, 1, 0, 'HASH', \&collectHash);
	$node004->addArrow($node005, 1, 0, 'on');
	$node005->addArrow($node005, 1, 0, 'STORE', \&collectStore);
	$node005->addArrow($node006, 1, 0, 'STORE', \&collectStore);
}

sub collectHash($o, $label, $value) {
	push @$o:hashes, $value;
}

sub collectObject($o, $label, $value) {
	push @$o:objectTokens, $value;
}

sub collectStore($o, $label, $value) {
	push @$o:stores, $value;
}

sub new($class, $actor) { bless {actor => $actor, ui => $actor->ui} }

# END AUTOGENERATED

# HTML FOLDER NAME store-book
# HTML TITLE Book
sub help($o, $cmd) {
	my $ui = $o:ui;
	$ui->space;
	$ui->command('cds book OBJECT*');
	$ui->command('cds book HASH* on STORE*');
	$ui->p('Books all indicated objects and reports whether booking as successful.');
	$ui->space;
	$ui->command('cds book HASH*');
	$ui->p('As above, but uses the selected store.');
	$ui->space;
}

sub book($o, $cmd) {
	$o:keyPair = $o:actor->preferredKeyPairToken->keyPair;
	$o:hashes = [];
	$o:stores = [];
	$o:objectTokens = [];
	$cmd->collect($o);

	# Use the selected store
	push @$o:stores, $o:actor->preferredStore if ! scalar @$o:stores;

	# Book all hashes on all stores
	my %triedStores;
	for my $store (@$o:stores) {
		next if $triedStores{$store->url};
		$triedStores{$store->url} = 1;
		for my $hash (@$o:hashes) {
			$o->process($store, $hash);
		}
	}

	# Book the direct object references
	for my $objectToken (@$o:objectTokens) {
		$o->process($objectToken->cliStore, $objectToken->hash);
	}

	# Warn the user if no key pair is selected
	return if ! $o:hasErrors;
	return if $o:keyPair;
	$o:ui->space;
	$o:ui->warning('Since no key pair is selected, the bookings were requested without signature. Stores are more likely to accept signed bookings. To add a signature, select a key pair using "cds use â€¦", or create your key pair using "cds create my key pair".');
}

sub process($o, $store, $hash) {
	# Upload the object
	my $success = $store->book($hash, $o:keyPair);
	if ($success) {
		$o:ui->line($o:ui->green('OK          '), $hash->hex, ' on ', $store->url);
	} else {
		$o:ui->line($o:ui->red('not found   '), $hash->hex, ' on ', $store->url);
		$o:hasErrors = 1;
	}
}
