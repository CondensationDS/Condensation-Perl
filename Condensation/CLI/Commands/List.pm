# BEGIN AUTOGENERATED

sub register($class, $cds, $help) {
	my $node000 = CDS::Parser::Node->new(1, {constructor => \&new, function => \&help});
	my $node001 = CDS::Parser::Node->new(1, {constructor => \&new, function => \&list});
	my $node002 = CDS::Parser::Node->new(0);
	my $node003 = CDS::Parser::Node->new(0);
	my $node004 = CDS::Parser::Node->new(0);
	my $node005 = CDS::Parser::Node->new(0);
	my $node006 = CDS::Parser::Node->new(0);
	my $node007 = CDS::Parser::Node->new(0);
	my $node008 = CDS::Parser::Node->new(0);
	my $node009 = CDS::Parser::Node->new(0);
	my $node010 = CDS::Parser::Node->new(0);
	my $node011 = CDS::Parser::Node->new(0);
	my $node012 = CDS::Parser::Node->new(0);
	my $node013 = CDS::Parser::Node->new(0);
	my $node014 = CDS::Parser::Node->new(1, {constructor => \&new, function => \&listBoxes});
	my $node015 = CDS::Parser::Node->new(1, {constructor => \&new, function => \&list});
	$cds->addArrow($node001, 1, 0, 'list');
	$cds->addArrow($node001, 1, 0, 'watch', \&collectWatch);
	$help->addArrow($node000, 1, 0, 'list');
	$node001->addDefault($node002);
	$node001->addArrow($node003, 1, 0, 'message');
	$node001->addArrow($node004, 1, 0, 'private');
	$node001->addArrow($node005, 1, 0, 'public');
	$node001->addArrow($node006, 0, 0, 'messages', \&collectMessages);
	$node001->addArrow($node006, 0, 0, 'private', \&collectPrivate);
	$node001->addArrow($node006, 0, 0, 'public', \&collectPublic);
	$node001->addArrow($node007, 1, 0, 'my', \&collectMy);
	$node001->addDefault($node011);
	$node002->addArrow($node002, 1, 0, 'BOX', \&collectBox);
	$node002->addArrow($node014, 1, 0, 'BOX', \&collectBox);
	$node003->addArrow($node006, 1, 0, 'box', \&collectMessages);
	$node004->addArrow($node006, 1, 0, 'box', \&collectPrivate);
	$node005->addArrow($node006, 1, 0, 'box', \&collectPublic);
	$node006->addArrow($node011, 1, 0, 'of');
	$node006->addDefault($node012);
	$node007->addArrow($node008, 1, 0, 'message');
	$node007->addArrow($node009, 1, 0, 'private');
	$node007->addArrow($node010, 1, 0, 'public');
	$node007->addArrow($node015, 1, 0, 'boxes');
	$node007->addArrow($node015, 0, 0, 'messages', \&collectMessages);
	$node007->addArrow($node015, 0, 0, 'private', \&collectPrivate);
	$node007->addArrow($node015, 0, 0, 'public', \&collectPublic);
	$node008->addArrow($node015, 1, 0, 'box', \&collectMessages);
	$node009->addArrow($node015, 1, 0, 'box', \&collectPrivate);
	$node010->addArrow($node015, 1, 0, 'box', \&collectPublic);
	$node011->addArrow($node012, 1, 0, 'ACTOR', \&collectActor);
	$node011->addArrow($node012, 1, 0, 'KEYPAIR', \&collectKeypair);
	$node011->addArrow($node015, 1, 1, 'ACCOUNT', \&collectAccount);
	$node011->addArrow($node015, 1, 0, 'ACTORGROUP', \&collectActorgroup);
	$node012->addArrow($node013, 1, 0, 'on');
	$node012->addDefault($node015);
	$node013->addArrow($node015, 1, 0, 'STORE', \&collectStore);
}

sub collectAccount($o, $label, $value) {
	$o:actorHash = $value->actorHash;
	$o:store = $value->cliStore;
}

sub collectActor($o, $label, $value) {
	$o:actorHash = $value;
}

sub collectActorgroup($o, $label, $value) {
	$o:actorGroup = $value;
}

sub collectBox($o, $label, $value) {
	push @$o:boxTokens, $value;
}

sub collectKeypair($o, $label, $value) {
	$o:actorHash = $value->keyPair->publicKey->hash;
	$o:keyPairToken = $value;
}

sub collectMessages($o, $label, $value) {
	$o:boxLabels = ['messages'];
}

sub collectMy($o, $label, $value) {
	$o:my = 1;
}

sub collectPrivate($o, $label, $value) {
	$o:boxLabels = ['private'];
}

sub collectPublic($o, $label, $value) {
	$o:boxLabels = ['public'];
}

sub collectStore($o, $label, $value) {
	$o:store = $value;
}

sub collectWatch($o, $label, $value) {
	$o:watchTimeout = 60000;
}

sub new($class, $actor) { bless {actor => $actor, ui => $actor->ui} }

# END AUTOGENERATED

# HTML FOLDER NAME store-list
# HTML TITLE List
sub help($o, $cmd) {
	my $ui = $o:ui;
	$ui->space;
	$ui->command('cds list BOX');
	$ui->p('Lists the indicated box. The object references are shown as "cds open envelope …" command, which can be executed to display the corresponding envelope. Change the command to "cds get …" to download the raw object, or "cds show record …" to show it as record.');
	$ui->space;
	$ui->command('cds list');
	$ui->p('Lists all boxes of the selected key pair.');
	$ui->space;
	$ui->command('cds list BOXLABEL');
	$ui->p('Lists only the indicated box of the selected key pair. BOXLABEL may be:');
	$ui->line('  message box');
	$ui->line('  public box');
	$ui->line('  private box');
	$ui->space;
	$ui->command('cds list my boxes');
	$ui->command('cds list my BOXLABEL');
	$ui->p('Lists your own boxes.');
	$ui->space;
	$ui->command('cds list [BOXLABEL of] ACTORGROUP|ACCOUNT');
	$ui->p('Lists boxes of an actor group, or account.');
	$ui->space;
	$ui->command('cds list [BOXLABEL of] KEYPAIR|ACTOR [on STORE]');
	$ui->p('Lists boxes of an actor on the specified or selected store.');
	$ui->space;
}

sub listBoxes($o, $cmd) {
	$o:boxTokens = [];
	$o:boxLabels = ['messages', 'private', 'public'];
	$cmd->collect($o);

	# Use the selected key pair to sign requests
	$o:keyPairToken = $o:actor->preferredKeyPairToken if ! $o:keyPairToken;

	for my $boxToken (@$o:boxTokens) {
		$o->listBox($boxToken);
	}

	$o:ui->space;
}

sub list($o, $cmd) {
	$o:boxLabels = ['messages', 'private', 'public'];
	$cmd->collect($o);

	# Actor hashes
	my @actorHashes;
	my @stores;
	if ($o:my) {
		$o:keyPairToken = $o:actor->keyPairToken;
		push @actorHashes, $o:keyPairToken->keyPair->publicKey->hash;
		push @stores, $o:actor->storageStore, $o:actor->messagingStore;
	} elsif ($o:actorHash) {
		push @actorHashes, $o:actorHash;
	} elsif ($o:actorGroup) {
		# TODO
	} else {
		push @actorHashes, $o:actor->preferredActorHash;
	}

	# Stores
	push @stores, $o:store if $o:store;
	push @stores, $o:actor->preferredStore if ! scalar @stores;

	# Use the selected key pair to sign requests
	my $preferredKeyPairToken = $o:actor->preferredKeyPairToken;
	$o:keyPairToken = $preferredKeyPairToken if ! $o:keyPairToken;
	$o:keyPairContext = $preferredKeyPairToken->keyPair->equals($o:keyPairToken->keyPair) ? '' : $o:ui->gray(' using ', $o:actor->keyPairReference($o:keyPairToken));

	# List boxes
	for my $store (@stores) {
		for my $actorHash (@actorHashes) {
			for my $boxLabel (@$o:boxLabels) {
				$o->listBox(CDS::BoxToken->new(CDS::AccountToken->new($store, $actorHash), $boxLabel));
			}
		}
	}

	$o:ui->space;
}

sub listBox($o, $boxToken) {
	$o:ui->space;
	$o:ui->title($o:actor->blueBoxReference($boxToken));

	# Query the store
	my $store = $boxToken->accountToken->cliStore;
	my ($hashes, $storeError) = $store->list($boxToken->accountToken->actorHash, $boxToken->boxLabel, $o:watchTimeout // 0, $o:keyPairToken->keyPair);
	return if defined $storeError;

	# Print the result
	my $count = scalar @$hashes;
	return if ! $count;

	my $context = $boxToken->boxLabel eq 'messages' ? $o:ui->gray(' on ', $o:actor->storeReference($store)) : $o:ui->gray(' from ', $o:actor->accountReference($boxToken->accountToken));
	my $keyPairContext = $boxToken->boxLabel eq 'public' ? '' : $o:keyPairContext // '';
	foreach my $hash (sort { $a->bytes cmp $b->bytes } @$hashes) {
		$o:ui->line($o:ui->gold('cds open envelope ', $hash->hex), $context, $keyPairContext);
	}
	$o:ui->line($count.' entries') if $count > 5;
}
