# BEGIN AUTOGENERATED

sub register($class, $cds, $help) {
	my $node000 = CDS::Parser::Node->new(0);
	my $node001 = CDS::Parser::Node->new(0);
	my $node002 = CDS::Parser::Node->new(0);
	my $node003 = CDS::Parser::Node->new(0);
	my $node004 = CDS::Parser::Node->new(0);
	my $node005 = CDS::Parser::Node->new(0);
	my $node006 = CDS::Parser::Node->new(0);
	my $node007 = CDS::Parser::Node->new(0);
	my $node008 = CDS::Parser::Node->new(0);
	my $node009 = CDS::Parser::Node->new(0);
	my $node010 = CDS::Parser::Node->new(0);
	my $node011 = CDS::Parser::Node->new(0);
	my $node012 = CDS::Parser::Node->new(0);
	my $node013 = CDS::Parser::Node->new(0);
	my $node014 = CDS::Parser::Node->new(0);
	my $node015 = CDS::Parser::Node->new(0);
	my $node016 = CDS::Parser::Node->new(1, {constructor => \&new, function => \&help});
	my $node017 = CDS::Parser::Node->new(1, {constructor => \&new, function => \&showSelectionCmd});
	my $node018 = CDS::Parser::Node->new(1, {constructor => \&new, function => \&unselectKeyPair});
	my $node019 = CDS::Parser::Node->new(1, {constructor => \&new, function => \&unselectStore});
	my $node020 = CDS::Parser::Node->new(1, {constructor => \&new, function => \&unselectActor});
	my $node021 = CDS::Parser::Node->new(1, {constructor => \&new, function => \&unselectAll});
	my $node022 = CDS::Parser::Node->new(1, {constructor => \&new, function => \&select});
	$cds->addArrow($node000, 1, 0, 'select');
	$cds->addArrow($node001, 1, 0, 'select');
	$cds->addArrow($node002, 1, 0, 'select');
	$cds->addArrow($node003, 1, 0, 'select');
	$cds->addArrow($node004, 1, 0, 'select');
	$cds->addArrow($node005, 1, 0, 'select');
	$cds->addArrow($node006, 1, 0, 'select');
	$cds->addArrow($node009, 1, 0, 'unselect');
	$cds->addArrow($node010, 1, 0, 'unselect');
	$cds->addArrow($node011, 1, 0, 'unselect');
	$cds->addArrow($node012, 1, 0, 'unselect');
	$cds->addArrow($node017, 1, 0, 'select');
	$help->addArrow($node016, 1, 0, 'select');
	$node000->addArrow($node022, 1, 0, 'KEYPAIR', \&collectKeypair);
	$node001->addArrow($node022, 1, 0, 'STORE', \&collectStore);
	$node002->addArrow($node014, 1, 0, 'ACTOR', \&collectActor);
	$node003->addArrow($node007, 1, 0, 'storage');
	$node004->addArrow($node008, 1, 0, 'messaging');
	$node005->addArrow($node022, 1, 0, 'ACTOR', \&collectActor);
	$node006->addArrow($node022, 1, 1, 'ACCOUNT', \&collectAccount);
	$node007->addArrow($node022, 1, 0, 'store', \&collectStore1);
	$node008->addArrow($node022, 1, 0, 'store', \&collectStore2);
	$node009->addArrow($node013, 1, 0, 'key');
	$node010->addArrow($node019, 1, 0, 'store');
	$node011->addArrow($node020, 1, 0, 'actor');
	$node012->addArrow($node021, 1, 0, 'all');
	$node013->addArrow($node018, 1, 0, 'pair');
	$node014->addArrow($node015, 1, 0, 'on');
	$node015->addArrow($node022, 1, 0, 'STORE', \&collectStore);
}

sub collectAccount($o, $label, $value) {
	$o:store = $value->cliStore;
	$o:actorHash = $value->actorHash;
}

sub collectActor($o, $label, $value) {
	$o:actorHash = $value;
}

sub collectKeypair($o, $label, $value) {
	$o:keyPairToken = $value;
	$o:actorHash = $value->keyPair->publicKey->hash;
}

sub collectStore($o, $label, $value) {
	$o:store = $value;
}

sub collectStore1($o, $label, $value) {
	$o:store = $o:actor->storageStore;
}

sub collectStore2($o, $label, $value) {
	$o:store = $o:actor->messagingStore;
}

sub new($class, $actor) { bless {actor => $actor, ui => $actor->ui} }

# END AUTOGENERATED

# HTML FOLDER NAME select
# HTML TITLE Select
sub help($o, $cmd) {
	my $ui = $o:ui;
	$ui->space;
	$ui->command('cds select');
	$ui->p('Shows the current selection.');
	$ui->space;
	$ui->command('cds select KEYPAIR');
	$ui->p('Selects KEYPAIR on this terminal. Some commands will use this key pair by default.');
	$ui->space;
	$ui->command('cds unselect key pair');
	$ui->p('Removes the key pair selection.');
	$ui->space;
	$ui->command('cds select STORE');
	$ui->p('Selects STORE on this terminal. Some commands will use this store by default.');
	$ui->space;
	$ui->command('cds unselect store');
	$ui->p('Removes the store selection.');
	$ui->space;
	$ui->command('cds select ACTOR');
	$ui->p('Selects ACTOR on this terminal. Some commands will use this store by default.');
	$ui->space;
	$ui->command('cds unselect actor');
	$ui->p('Removes the actor selection.');
	$ui->space;
	$ui->command('cds unselect');
	$ui->p('Removes any selection.');
	$ui->space;
}

sub select($o, $cmd) {
	$cmd->collect($o);

	if ($o:keyPairToken) {
		$o:actor->sessionRoot->child('selected key pair')->setText($o:keyPairToken->file);
		$o:ui->pGreen('Key pair ', $o:keyPairToken->file, ' selected.');
	}

	if ($o:store) {
		$o:actor->sessionRoot->child('selected store')->setText($o:store->url);
		$o:ui->pGreen('Store ', $o:store->url, ' selected.');
	}

	if ($o:actorHash) {
		$o:actor->sessionRoot->child('selected actor')->setBytes($o:actorHash->bytes);
		$o:ui->pGreen('Actor ', $o:actorHash->hex, ' selected.');
	}

	$o:actor->saveOrShowError;
}

sub unselectKeyPair($o, $cmd) {
	$o:actor->sessionRoot->child('selected key pair')->clear;
	$o:ui->pGreen('Key pair selection cleared.');
	$o:actor->saveOrShowError;
}

sub unselectStore($o, $cmd) {
	$o:actor->sessionRoot->child('selected store')->clear;
	$o:ui->pGreen('Store selection cleared.');
	$o:actor->saveOrShowError;
}

sub unselectActor($o, $cmd) {
	$o:actor->sessionRoot->child('selected actor')->clear;
	$o:ui->pGreen('Actor selection cleared.');
	$o:actor->saveOrShowError;
}

sub unselectAll($o, $cmd) {
	$o:actor->sessionRoot->child('selected key pair')->clear;
	$o:actor->sessionRoot->child('selected store')->clear;
	$o:actor->sessionRoot->child('selected actor')->clear;
	$o:actor->saveOrShowError // return;
	$o->showSelection;
}

sub showSelectionCmd($o, $cmd) {
	$o:ui->space;
	$o->showSelection;
	$o:ui->space;
}

sub showSelection($o) {
	my $keyPairFile = $o:actor->sessionRoot->child('selected key pair')->textValue;
	my $storeUrl = $o:actor->sessionRoot->child('selected store')->textValue;
	my $actorBytes = $o:actor->sessionRoot->child('selected actor')->bytesValue;

	$o:ui->line($o:ui->darkBold('Selected key pair  '), length $keyPairFile ? $keyPairFile : $o:ui->gray('none'));
	$o:ui->line($o:ui->darkBold('Selected store     '), length $storeUrl ? $storeUrl : $o:ui->gray('none'));
	$o:ui->line($o:ui->darkBold('Selected actor     '), length $actorBytes == 32 ? unpack('H*', $actorBytes) : $o:ui->gray('none'));
}
